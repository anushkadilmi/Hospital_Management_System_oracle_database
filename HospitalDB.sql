--Create Tables
CREATE TABLE Department(
    DepartmentID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    DepartmentName VARCHAR2(50) NOT NULL,
    PRIMARY KEY(DepartmentID)
);

CREATE TABLE Doctor (
    DoctorID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    FirstName VARCHAR2(50) NOT NULL,
    LastName VARCHAR2(50) NOT NULL,
    DepartmentID NUMBER,
    PRIMARY KEY (DoctorID),
    FOREIGN KEY (DepartmentID) REFERENCES Department(DepartmentID),
    CHECK (LENGTH(FirstName) > 0 AND LENGTH(LastName) > 0)
);

CREATE TABLE Nurse (
    NurseID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    FirstName VARCHAR2(50) NOT NULL,
    LastName VARCHAR2(50) NOT NULL,
    DepartmentID NUMBER,
    PRIMARY KEY (NurseID),
    FOREIGN KEY (DepartmentID) REFERENCES Department(DepartmentID),
    CHECK (LENGTH(FirstName) > 0 AND LENGTH(LastName) > 0)
);

CREATE TABLE Patient (
    PatientID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    FirstName VARCHAR2(50) NOT NULL,
    LastName VARCHAR2(50) NOT NULL,
    DateOfBirth DATE NOT NULL,
    PRIMARY KEY (PatientID),
    Gender VARCHAR2(1) CHECK (Gender IN ('M', 'F')),
    CHECK (LENGTH(FirstName) > 0 AND LENGTH(LastName) > 0)
);

CREATE TABLE MedicalHistory (
    MedicalHistoryID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    PatientID NUMBER,
    Diagnosis VARCHAR2(255) NOT NULL,
    Treatment VARCHAR2(255) NOT NULL,
    PRIMARY KEY (MedicalHistoryID),
    FOREIGN KEY (PatientID) REFERENCES Patient(PatientID)
);

CREATE TABLE Prescription (
    PrescriptionID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    DoctorID NUMBER,
    PatientID NUMBER,
    Medication VARCHAR2(100) NOT NULL,
    Dosage VARCHAR2(50),
    PrescriptionDate DATE NOT NULL,
    PRIMARY KEY (PrescriptionID),
    FOREIGN KEY (DoctorID) REFERENCES Doctor(DoctorID),
    FOREIGN KEY (PatientID) REFERENCES Patient(PatientID)
);

CREATE TABLE Appointment (
    AppointmentID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    DoctorID NUMBER,
    PatientID NUMBER,
    AppointmentDate TIMESTAMP NOT NULL,
    PRIMARY KEY (AppointmentID),
    FOREIGN KEY (DoctorID) REFERENCES Doctor(DoctorID),
    FOREIGN KEY (PatientID) REFERENCES Patient(PatientID)
);

INSERT INTO Department (DepartmentName)
SELECT 'Cardiology' FROM DUAL
UNION ALL SELECT 'Orthopedics' FROM DUAL
UNION ALL SELECT 'Pediatrics' FROM DUAL
UNION ALL SELECT 'Oncology' FROM DUAL
UNION ALL SELECT 'Neurology' FROM DUAL
UNION ALL SELECT 'Urology' FROM DUAL;

INSERT ALL
    INTO Doctor (FirstName, LastName, DepartmentID) VALUES ('Ashley', 'Fernando', 1)
SELECT 1 FROM dual;
       
INSERT ALL
    INTO Doctor (FirstName, LastName, DepartmentID) VALUES ('Dylan', 'Silva', 2)  
SELECT 1 FROM dual;

INSERT ALL
    INTO Doctor (FirstName, LastName, DepartmentID) VALUES ('Nadia', 'Rajapakse', 3)
SELECT 1 FROM dual;

INSERT INTO Nurse (FirstName, LastName, DepartmentID) VALUES ('Nimali', 'Fernando', 1);
INSERT INTO Nurse (FirstName, LastName, DepartmentID) VALUES ('Rajitha', 'Perera', 2);
INSERT INTO Nurse (FirstName, LastName, DepartmentID) VALUES ('Tharushi', 'Samaraweera', 3);
INSERT INTO Nurse (FirstName, LastName, DepartmentID) VALUES ('Imran', 'Hassan', 4);
INSERT INTO Nurse (FirstName, LastName, DepartmentID) VALUES ('Shanika', 'Rajapaksha', 5);

INSERT INTO Patient (FirstName, LastName, DateOfBirth, Gender) VALUES ('Thilini', 'Silva', TO_DATE('1976-11-05', 'YYYY-MM-DD'), 'F');
INSERT INTO Patient (FirstName, LastName, DateOfBirth, Gender) VALUES ('Dilshan', 'Perera', TO_DATE('1985-08-22', 'YYYY-MM-DD'), 'M');
INSERT INTO Patient (FirstName, LastName, DateOfBirth, Gender) VALUES ('Tharindu', 'Samaraweera', TO_DATE('1998-03-10', 'YYYY-MM-DD'), 'M');
INSERT INTO Patient (FirstName, LastName, DateOfBirth, Gender) VALUES ('Thilini', 'Silva', TO_DATE('1976-11-05', 'YYYY-MM-DD'), 'F');
INSERT INTO Patient (FirstName, LastName, DateOfBirth, Gender) VALUES ('Chathurika', 'Rajapaksha', TO_DATE('2002-07-18', 'YYYY-MM-DD'), 'F');

INSERT INTO MedicalHistory (PatientID, Diagnosis, Treatment) VALUES (21, 'Hypertension', 'Prescription medication');
INSERT INTO MedicalHistory (PatientID, Diagnosis, Treatment) VALUES (22, 'Fractured Arm', 'Cast and painkillers');
INSERT INTO MedicalHistory (PatientID, Diagnosis, Treatment) VALUES (23, 'Allergies', 'Antihistamines');
INSERT INTO MedicalHistory (PatientID, Diagnosis, Treatment) VALUES (24, 'Cancer', 'Chemotherapy');
INSERT INTO MedicalHistory (PatientID, Diagnosis, Treatment) VALUES (25, 'Migraines', 'Pain relief and lifestyle changes');

INSERT INTO Prescription (DoctorID, PatientID, Medication, Dosage, PrescriptionDate) 
VALUES (9, 21, 'Lisinopril', '10mg once daily', TO_DATE('2023-01-10', 'YYYY-MM-DD'));

INSERT INTO Prescription (DoctorID, PatientID, Medication, Dosage, PrescriptionDate) 
VALUES (12, 22, 'Ibuprofen', '200mg as needed', TO_DATE('2023-02-15', 'YYYY-MM-DD'));

INSERT INTO Prescription (DoctorID, PatientID, Medication, Dosage, PrescriptionDate) 
VALUES (13, 23, 'Cetirizine', '10mg once daily', TO_DATE('2023-03-20', 'YYYY-MM-DD'));

INSERT INTO Prescription (DoctorID, PatientID, Medication, Dosage, PrescriptionDate) 
VALUES (14, 24, 'Doxorubicin', 'As per oncologist advice', TO_DATE('2023-04-25', 'YYYY-MM-DD'));

INSERT INTO Appointment (DoctorID, PatientID, AppointmentDate) 
VALUES (9, 21, TO_DATE('2023-01-15 10:00:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO Appointment (DoctorID, PatientID, AppointmentDate) 
VALUES (12, 22, TO_DATE('2023-02-20 14:30:00', 'YYYY-MM-DD HH24:MI:SS'));

INSERT INTO Appointment (DoctorID, PatientID, AppointmentDate) 
VALUES (13, 23, TO_DATE('2023-03-25 09:45:00', 'YYYY-MM-DD HH24:MI:SS'));

-- Where
SELECT * FROM Patient WHERE Gender = 'F';

SELECT * FROM Doctor WHERE DepartmentID = 3;

-- Group by
SELECT DepartmentID, COUNT(*) FROM Doctor GROUP BY DepartmentID;

SELECT DepartmentID, COUNT(*) FROM Nurse GROUP BY DepartmentID;

-- Having
SELECT DepartmentID, COUNT(*) FROM Doctor GROUP BY DepartmentID HAVING COUNT(*) > 1;

-- Order by
SELECT * FROM Nurse ORDER BY LastName;

SELECT * FROM Patient ORDER BY LastName, FirstName;

-- Like
SELECT * FROM Patient WHERE FirstName LIKE 'D%';

SELECT * FROM Nurse WHERE FirstName LIKE 'N%';

-- Count()
SELECT COUNT(*) FROM MedicalHistory;

SELECT COUNT(*) FROM Prescription;

-- Length()
SELECT FirstName, LastName, LENGTH(FirstName) + LENGTH(LastName) AS FullnameLength FROM Doctor;

SELECT FirstName, LastName, LENGTH(FirstName) + LENGTH(LastName) AS FullnameLength FROM Nurse;

-- Initcap()
SELECT Initcap(FirstName) AS CapitalizedFirstName FROM Nurse;

SELECT Initcap(FirstName) AS CapitalizedFirstName FROM Doctor;

-- Max()
SELECT MAX(DateOfBirth) AS OldestPatient FROM Patient;

-- Min()
SELECT MIN(PrescriptionDate) AS EarliestPrescription FROM Prescription;

-- AND
SELECT * FROM Patient WHERE Gender = 'M' AND DateOfBirth < TO_DATE('1990-01-01', 'YYYY-MM-DD');

-- OR
SELECT * FROM Doctor WHERE DepartmentID = 1 OR DepartmentID = 2;

-- Join
SELECT Patient.FirstName, Patient.LastName, Appointment.AppointmentDate
FROM Patient
JOIN Appointment ON Patient.PatientID = Appointment.PatientID;

-- PL/SQL program 1: Retrieve patient details based on PatientID
SET SERVEROUTPUT ON;
DECLARE
   v_patient_id NUMBER := 21;
   v_patient_record Patient%ROWTYPE;
BEGIN
   SELECT * INTO v_patient_record
   FROM Patient
   WHERE PatientID = v_patient_id;

   DBMS_OUTPUT.PUT_LINE('Patient Name: ' || v_patient_record.FirstName || ' ' || v_patient_record.LastName);
END;
/

SET SERVEROUTPUT ON;
DECLARE
   v_last_name VARCHAR2(50) := 'Perera';
   v_patient_record Patient%ROWTYPE; -- Declare the variable with the same structure as the table
BEGIN
   SELECT *
   INTO v_patient_record
   FROM Patient
   WHERE LastName = v_last_name AND ROWNUM = 1;

   IF v_patient_record.PatientID IS NOT NULL THEN
      DBMS_OUTPUT.PUT_LINE('Patient Name: ' || v_patient_record.FirstName || ' ' || v_patient_record.LastName);
   ELSE
      DBMS_OUTPUT.PUT_LINE('Patient not found with last name ' || v_last_name);
   END IF;
END;
/

DECLARE
   v_birth_date DATE := TO_DATE('1976-11-05', 'YYYY-MM-DD');
   v_patient_record Patient%ROWTYPE; -- Declare the variable with the same structure as the table
BEGIN
   SELECT *
   INTO v_patient_record
   FROM Patient
   WHERE DateOfBirth = v_birth_date AND ROWNUM = 1;

   IF v_patient_record.PatientID IS NOT NULL THEN
      DBMS_OUTPUT.PUT_LINE('Patient Name: ' || v_patient_record.FirstName || ' ' || v_patient_record.LastName);
   ELSE
      DBMS_OUTPUT.PUT_LINE('Patient not found with date of birth ' || TO_CHAR(v_birth_date, 'YYYY-MM-DD'));
   END IF;
END;
/

DECLARE
   v_gender CHAR(1) := 'F';
   v_patient_record Patient%ROWTYPE; -- Declare the variable with the same structure as the table
BEGIN
   SELECT *
   INTO v_patient_record
   FROM Patient
   WHERE Gender = v_gender AND ROWNUM = 1;

   IF v_patient_record.PatientID IS NOT NULL THEN
      DBMS_OUTPUT.PUT_LINE('Patient Name: ' || v_patient_record.FirstName || ' ' || v_patient_record.LastName);
   ELSE
      DBMS_OUTPUT.PUT_LINE('Patient not found with gender ' || v_gender);
   END IF;
END;
/

DECLARE
   v_patient_id_with_history NUMBER := 23;
   v_patient_record Patient%ROWTYPE; -- Declare the variable with the same structure as the Patient table
BEGIN
   SELECT p.*
   INTO v_patient_record
   FROM Patient p
   JOIN MedicalHistory mh ON p.PatientID = mh.PatientID
   WHERE p.PatientID = v_patient_id_with_history AND ROWNUM = 1;

   IF v_patient_record.PatientID IS NOT NULL THEN
      DBMS_OUTPUT.PUT_LINE('Patient Name: ' || v_patient_record.FirstName || ' ' || v_patient_record.LastName);
   ELSE
      DBMS_OUTPUT.PUT_LINE('Patient not found with medical history for PatientID ' || v_patient_id_with_history);
   END IF;
END;
/

-- PL/SQL program 1: If/Else
DECLARE
   v_age NUMBER := 30;
BEGIN
   IF v_age < 18 THEN
      DBMS_OUTPUT.PUT_LINE('Minor');
   ELSE
      DBMS_OUTPUT.PUT_LINE('Adult');
   END IF;
END;
/

-- PL/SQL program 2: Case
DECLARE
   v_department_id NUMBER := 3;
BEGIN
   CASE v_department_id
      WHEN 1 THEN
         DBMS_OUTPUT.PUT_LINE('Cardiology Department');
      WHEN 2 THEN
         DBMS_OUTPUT.PUT_LINE('Orthopedics Department');
      ELSE
         DBMS_OUTPUT.PUT_LINE('Other Department');
   END CASE;
END;
/

-- PL/SQL program 3: For Loop
DECLARE
   v_counter NUMBER;
BEGIN
   FOR v_counter IN 1..5 LOOP
      DBMS_OUTPUT.PUT_LINE('Iteration: ' || v_counter);
   END LOOP;
END;
/

-- PL/SQL program 4: While Loop
DECLARE
   v_counter NUMBER := 1;
BEGIN
   WHILE v_counter <= 5 LOOP
      DBMS_OUTPUT.PUT_LINE('Iteration: ' || v_counter);
      v_counter := v_counter + 1;
   END LOOP;
END;
/

-- PL/SQL Procedure 1
DECLARE
   v_patient_name VARCHAR2(100);
   v_date_of_birth DATE;
   v_gender CHAR(1);
   v_patient_id NUMBER := 23; 
BEGIN
   -- Call the stored procedure
   GetPatientDetails(p_patient_id => v_patient_id,
                     p_patient_name => v_patient_name,
                     p_date_of_birth => v_date_of_birth,
                     p_gender => v_gender);

   -- Display the output
   DBMS_OUTPUT.PUT_LINE('Patient Name: ' || v_patient_name);
   DBMS_OUTPUT.PUT_LINE('Date of Birth: ' || TO_CHAR(v_date_of_birth, 'YYYY-MM-DD'));
   DBMS_OUTPUT.PUT_LINE('Gender: ' || v_gender);
END;
/

-- PL/SQL Procedure 2
SET SERVEROUTPUT ON;
DECLARE
   v_doctor_name VARCHAR2(100);
   v_patient_name VARCHAR2(100);
   v_appointment_date DATE;
   v_appointment_id NUMBER := 3; -- Replace with the actual AppointmentID
BEGIN
   -- Call the stored procedure for appointments
   GetAppointmentDetails(p_appointment_id => v_appointment_id,
                         p_doctor_name => v_doctor_name,
                         p_patient_name => v_patient_name,
                         p_appointment_date => v_appointment_date);

   -- Display the output
   DBMS_OUTPUT.PUT_LINE('Doctor Name: ' || v_doctor_name);
   DBMS_OUTPUT.PUT_LINE('Patient Name: ' || v_patient_name);
   DBMS_OUTPUT.PUT_LINE('Appointment Date: ' || TO_CHAR(v_appointment_date, 'YYYY-MM-DD HH24:MI:SS'));
END;
/

SELECT * FROM pat;

